// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// vecpow2
NumericVector vecpow2(NumericVector base, NumericVector exp);
RcppExport SEXP _DiveR_vecpow2(SEXP baseSEXP, SEXP expSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type base(baseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exp(expSEXP);
    rcpp_result_gen = Rcpp::wrap(vecpow2(base, exp));
    return rcpp_result_gen;
END_RCPP
}
// vecdiv
NumericVector vecdiv(const NumericVector num, const NumericVector denum);
RcppExport SEXP _DiveR_vecdiv(SEXP numSEXP, SEXP denumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type num(numSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type denum(denumSEXP);
    rcpp_result_gen = Rcpp::wrap(vecdiv(num, denum));
    return rcpp_result_gen;
END_RCPP
}
// cpp_half_life
NumericVector cpp_half_life(NumericVector period, NumericVector time);
RcppExport SEXP _DiveR_cpp_half_life(SEXP periodSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type period(periodSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_half_life(period, time));
    return rcpp_result_gen;
END_RCPP
}
// cpp_haldane_desat
DataFrame cpp_haldane_desat(DataFrame dtcurve, NumericVector comp, NumericVector Scomp, NumericVector depths, NumericVector ppn2_ini, NumericVector bpal_speed);
RcppExport SEXP _DiveR_cpp_haldane_desat(SEXP dtcurveSEXP, SEXP compSEXP, SEXP ScompSEXP, SEXP depthsSEXP, SEXP ppn2_iniSEXP, SEXP bpal_speedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type dtcurve(dtcurveSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type comp(compSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Scomp(ScompSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type depths(depthsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ppn2_ini(ppn2_iniSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bpal_speed(bpal_speedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_haldane_desat(dtcurve, comp, Scomp, depths, ppn2_ini, bpal_speed));
    return rcpp_result_gen;
END_RCPP
}
// insertCell
SEXP insertCell(SEXP x, int n);
RcppExport SEXP _DiveR_insertCell(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(insertCell(x, n));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_DiveR_vecpow2", (DL_FUNC) &_DiveR_vecpow2, 2},
    {"_DiveR_vecdiv", (DL_FUNC) &_DiveR_vecdiv, 2},
    {"_DiveR_cpp_half_life", (DL_FUNC) &_DiveR_cpp_half_life, 2},
    {"_DiveR_cpp_haldane_desat", (DL_FUNC) &_DiveR_cpp_haldane_desat, 6},
    {"_DiveR_insertCell", (DL_FUNC) &_DiveR_insertCell, 2},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_DiveR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
